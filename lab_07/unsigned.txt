PUBLIC F_1
PUBLIC F_3
PUBLIC F_5

DSEG	SEGMENT PARA PUBLIC 'DATA'
		NEWLINE	DB	10, 13, '$'
        SYMBOLS DB '0123456789ABCDEF'
        NUMBER  DB ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, '$' ; maximum num - 2 ^ 16
DSEG	ENDS

CSEG	SEGMENT PARA PUBLIC 'CODE'
		ASSUME CS:CSEG, DS:DSEG
		
F_1		PROC NEAR ; BIN BIN BIN
		PUSH BP
		MOV  BP, SP ; stack registers, SP - point on the top of the stack, so we configure stack here
		
		MOV  BX, [BP + 6] ; in BX put something that is in stack by the number six (there are SI, X, BP), BX = X
		
		MOV CX, 16 ; 16 max symbol
		
; delete all zeros on the left in F_1_1 and F_1_2
F_1_1:
		SHL BX, 1 ; bitwise left shift by 1 (* 2)
		JNC F_1_2
		MOV DH, 1 ; remember 1
		JMP F_1_4		

F_1_2:
		LOOP F_1_1
		INC CX
		
F_1_3:
		MOV DH, 0 
		SHL BX, 1 ; bitwise left shift by 1
		JNC F_1_4 ; no overflow, CF=0, if 0
		MOV DH, 1 ; DH = 1 ??, if 1
F_1_4:
		MOV  DL, '0' ; DL = 30, print first "one"
		ADD  DL, DH ; DL = 30 + DH                  
			
		MOV  AH, 2 ; print DL
		INT  21h
			
		DEC  CX ; minus one digit  
		CMP CX, 0
		JA F_1_3; CX > 0
 
F_1_5:	        MOV  AH, 9
		MOV  DX, OFFSET NEWLINE
		INT  21H

		POP BP
		RET 4 ; delete x, si
F_1		ENDP
		
F_3		PROC NEAR ; DEC DEC DEC
		PUSH BP
		MOV	 BP, SP 
		MOV	 AX, [BP + 6] ; AX = X
		
F_3_1:
        	XOR CX, CX ; clean CX
        	MOV BX, 10 ; BASIS OF THE SYSTEM OF CALCULATION
F_3_2:
        	XOR DX, DX ; clean DX
        	DIV BX ; divisible AX, divider BX, private AX, balance DX (AX = BX * AX + DX)
        	ADD DX, '0' ; DX = 30
        	PUSH DX
        	INC CX ; get length
        	CMP AX, 0 ; AH = AL = 0 - all the number passed by
        	JNE F_3_2 ; ZF=0 (so if AX != 0)

        	MOV AH, 2 ;  print DL
F_3_3:
        	POP DX ; CX = length of the number
        	INT 21H
        	LOOP F_3_3
		 
		MOV  AH, 9
		MOV  DX, OFFSET NEWLINE
		INT  21H
		
		POP BP
		RET 4 ; delete x, si
F_3		ENDP
		
F_5		PROC NEAR ; HEX HEX HEX
		PUSH BP
        	PUSH SI
		MOV  BP, SP

       		MOV DX, [BP + 8] ; DX = X
		MOV SI, 16 ; maximum digit
        	MOV CL, 4 ; length of bitwise shift

LOOP_H:
		MOV AX, 15 ; maximum value 15 = F
		AND AX, DX ; mask with X, in AX we have last num of the X
            
        	DEC SI ; index of NUMBER (mass)
        	MOV BX, OFFSET SYMBOLS ; table of correspondence - list of all symbols
        	MOV AL, AL ; initial value - last num of X
        	XLAT ; AL = [BX][AL], AL = SYMBOLS[AL]
		
        	MOV BX, OFFSET NUMBER 
        	MOV [BX + SI], AL ; SI - index, AL - num, put num num in NUMBER
           
		SHR DX, CL ; DX = X, CL = 4, delete last num
		JNE  LOOP_H
            
        	MOV DX, OFFSET NUMBER ; print dx
        	ADD DX, SI ; SI = 16 - num_length, we do it not to print zeros
        	MOV AH, 9
        	INT 21H
            
		MOV AH, 9 ; print newline
		MOV DX, OFFSET NEWLINE
		INT 21H
		
		POP SI
		POP BP
		RET 4 ; delete X, SI
F_5		ENDP
		
CSEG	ENDS
END
