EXTRN	SCAN : NEAR
EXTRN	F_1 : NEAR	; unsigned	bin
EXTRN	F_2 : NEAR	; signed	bin
EXTRN	F_3 : NEAR	; unsigned	dec
EXTRN	F_4 : NEAR	; signed	dec
EXTRN	F_5 : NEAR	; unsigned	hex
EXTRN	F_6 : NEAR	; signed	hex

SSTACK	SEGMENT PARA STACK 'STACK' ; 
		DB		64 DUP('STACK___')
SSTACK	ENDS

DSEG	SEGMENT PARA PUBLIC 'DATA'
		F		DW	F_1, F_2, F_3, F_4, F_5, F_6
		X		DW	10 ; default number, if nothing eentered
		
		MENU	DB	'	                    MENU', 10, 13
				DB	'0) Print menu again', 10, 13
				DB	'1) Input number', 10, 13
				DB	'2) Number as unsigned bin', 10, 13
				DB	'3) Number as signed bin', 10, 13
				DB	'4) Number as unsigned dec', 10, 13
				DB	'5) Number as signed dec', 10, 13
				DB	'6) Number as unsigned hex', 10, 13
				DB	'7) Number as signed hex', 10, 13
				DB	'8) Exit', 10, 13, '$'
		ENTER		DB	'> $' ; signal that we should enter something, to the user: this symbols are on the screen
		NEW_LINE	DB	10, 13, '$'; 
DSEG	ENDS

CSEG	SEGMENT PARA PUBLIC 'CODE'
		ASSUME CS:CSEG, DS:DSEG, SS:SSTACK
BEGIN:
		MOV  AX, DSEG
		MOV  DS, AX
PRINT_MENU:
		MOV  AH, 9 ; print menu
		MOV  DX, OFFSET MENU
		INT  21H
		
PRINT_ENTER:
		MOV  AH, 9
		MOV  DX, OFFSET ENTER ; print flag that 
		INT  21H
		
SCAN_MENU:
		MOV  AH, 8 ; scan one symbol instantly from cmd
		INT  21H
		
		CMP  AL, '0' ; if > 8 or < 0
		JB   SCAN_MENU ; scan symbol again
		CMP  AL, '8'; if >= 0 or <= 8
		JA   SCAN_MENU 
		
		MOV  BL, AL ; save choise in bl
		XOR  BH, BH ; clean bh, bx = bl
		
		MOV  AH, 2 ; print one symbol (what we ' ve chosen) - it is an echo
		MOV  DL, AL
		INT  21H
		
		MOV  AH, 9 ; print new line
		MOV  DX, OFFSET NEW_LINE
		INT  21H
		
PROCESS:
		SUB  BX, '0' ; substraction bx - '0', we get a number from the symbol
		
		CMP  BX, 8 ; if chosen 8 - close prog
		JE  EXIT
		
		CMP  BX, 0 ; if 0 print menu again
		JE   PRINT_MENU
		
		CMP  BX, 1 ; if 1 enter number
		JE   INPUT_NUMBER
		
		SUB  BX, 2 ; because array of funcs starts from the second point in menu
		SHL  BX, 1 ; because address consists of two bytes  (* 2)
		
		PUSH X ; if nothing entered, work with X 
		PUSH SI
		CALL F[BX] ; call function number bx
		
		JMP  PRINT_ENTER ; scan another number
		
INPUT_NUMBER:
		CALL SCAN 
		
		MOV  X, AX  
		MOV  SI, DX
		
		JMP  PRINT_ENTER
		
EXIT:
		MOV  AH, 4CH ; close programa
		XOR  AL, AL
		INT  21H
		
CSEG	ENDS
END BEGIN