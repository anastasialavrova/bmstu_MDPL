PUBLIC F_2
PUBLIC F_4
PUBLIC F_6

EXTRN  F_1 : NEAR
EXTRN  F_3 : NEAR
EXTRN  F_5 : NEAR

CSEG	SEGMENT PARA PUBLIC 'CODE'
		ASSUME CS:CSEG
		
F_2		PROC NEAR ; all the same in all the funcs
		PUSH BP
		MOV  BP, SP
		
		MOV  CX, [BP + 4] ; SI
		MOV  BX, [BP + 6] ; X
		
		CMP  CL, 0 ; CL - flag minus
		JE   SB_SKIP_NEG ; if CL == 0
		
		MOV  AH, 2 ; print minus before the num
		MOV  DL, '-'
		INT  21H
		
		NEG  BX ; make negative
		
SB_SKIP_NEG: ; if the number is positive
		PUSH BX
		PUSH CX
		
		CALL F_1 ; call unsigned bin
		
		POP BP
		RET 4 ; delete x, si
F_2		ENDP
		
F_4		PROC NEAR
		PUSH BP
		MOV  BP, SP
		
		MOV  CX, [BP + 4] ; X ?
		MOV  BX, [BP + 6] ; SI ?
		
		CMP  CL, 0
		JE   SD_SKIP_NEG
		
		MOV  AH, 2
		MOV  DL, '-'
		INT  21H
		
		NEG  BX
		
SD_SKIP_NEG:
		PUSH  BX
		PUSH  CX
		
		CALL  F_3
		
		POP BP
		RET 4 ; delete x, si
F_4		ENDP
		
F_6		PROC NEAR
		PUSH BP
		MOV  BP, SP
		
		MOV  CX, [BP + 4]
		MOV  BX, [BP + 6]
		
		CMP  CL, 0
		JE   SH_SKIP_NEG
		
		MOV  AH, 2
		MOV  DL, '-'
		INT  21H
		
		NEG  BX
		
SH_SKIP_NEG:
		PUSH  BX
		PUSH  CX
		
		CALL  F_5
		
		POP BP
		RET 4 ; delete x, si
F_6		ENDP
		
CSEG	ENDS
END